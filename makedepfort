#!/usr/bin/env python
# -*- mode: python -*-

import sys, re, argparse

# regular expression for include files
incFileRE = re.compile("^\s*include\s+'(\S+)'",re.IGNORECASE)

# regular expression for USEd module names
modUseNamRE = re.compile("^\s*use\s+(\w+)",re.IGNORECASE)

# regular expression for defined module names
modDefNamRE = re.compile("^\s*module\s+(\w+)",re.IGNORECASE)

def searchDep(inForFileName):
    inForFile = open(inForFileName,'r') # input file
    incFileSet = set()   # the set for include files found
    modUseNamSet = set() # the set for module names found
    modDefLST = list()   # the list of defined modules
    
    for inLine in inForFile:
        # find and store include files
        moInc = incFileRE.match(inLine.strip())
        if moInc:
            incFile = moInc.group(1)
            if not incFile in incFileSet:
                incFileSet.add(incFile)
        # find and store USEd modules
        moModUsed = modUseNamRE.match(inLine.strip())
        if moModUsed:
            modUseNam = moModUsed.group(1).lower() # lowercased
            if not modUseNam in modUseNamSet:
                modUseNamSet.add(modUseNam)
        # find and store defined modules
        moModDefined = modDefNamRE.match(inLine.strip())
        if moModDefined:
            modDefNam = moModDefined.group(1).lower() # lowercased
            modDefLST.append(modDefNam)

    # delete USEd modules that are defined in the same file
    for mod in modDefLST:
        modUseNamSet.discard(mod) # removes if present
    
    return (incFileSet,modUseNamSet,modDefLST)

def printDeps(InFileNam,excludeMPI):
    deps = searchDep(inFileNam) # (set of include files,
                                #  set of used module names,
                                #  list of defined module names)
    #print deps

    # include files used in the source, as a string
    incStr = " ".join(s for s in deps[0])
    if excludeMPI:
        incStr = incStr.replace("mpif.h",'')
    # modules used in the source, as a string
    modUseStr = " ".join(s+".mod" for s in deps[1])
    # modules defined in the source, as a string
    modDefStr = " ".join(s+".mod" for s in deps[2])

    # dependency of an object file:
    #   1. on the corresponding source itself,
    #   2. on the include files, and
    #   3. on the modules used.
    resStr = "%s : %s %s %s" % (inFileNam.replace(".f",".o"),
                                inFileNam,incStr,modUseStr)
    # dependency of a module file:
    #   1. on the source which produces the module, and
    #   2. on the corresponding object file.
    # c.f. http://lagrange.mechse.illinois.edu/f90_mod_deps/
    #      http://qiita.com/chirimen/items/af8479d8c0c7cf545b1e
    if len(modDefStr):
        resStr += "\n%s : %s %s" % (modDefStr,inFileNam,
                                    inFileNam.replace(".f",".o"))
    # print the dependency
    print resStr
            
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("ffile", nargs="+")
    parser.add_argument("-m", "--exclude-MPI",
                        help="exclude the dependency on 'mpi.h'",
                        action="store_true")
    args = parser.parse_args()
    # print args
    for inFileNam in args.ffile:
        printDeps(inFileNam,excludeMPI=args.exclude_MPI)
